{"version":3,"sources":["Chart.js","ChartInfo.js","Form.js","App.js","index.js"],"names":["Chart","register","zoomPlugin","ChartDataLabels","Chart2","chartData","displayValues","subtitle","data","options","responsive","interaction","mode","intersect","stacked","plugins","title","display","text","legend","position","zoom","min","max","wheel","enabled","drag","speed","pan","datalabels","color","align","padding","right","labels","top","font","value","scales","y","type","ticks","callback","index","y1","grid","drawOnChartArea","ChartInfo","className","Form","props","useState","fromTime","toTime","furnace","furnaceLabel","customer","material","partName","partNumber","process","batchNo","batchQty","soakingStart","soakingEnd","totalSoakingTime","subTitle","interval","inputField","setInputField","label","furnaceObjToDisplay","find","obj","inputsHandler","e","target","name","htmlFor","selected","onChange","dateFormat","timeInputLabel","timeFormat","startDate","endDate","showTimeSelect","minDate","map","option","defaultValue","for","onClick","fromTimeToDisplay","moment","format","toTimeToDisplay","furnaceToDisplay","setSubTitle","callbackSubmit","callbackExport","callbackDisplayReadings","App","setChartData","displayReadings","setDisplayReadings","getTimePortion","item","timestamp","substring","fetchPrices","url","console","log","fetch","res","json","datasetfiltered","actualMv","borderColor","backgroundColor","yAxisID","setMv","actualOt","setOt","actualCp","setCp","datasets","input","window","document","getElementsByClassName","html2canvas","then","canvas","width","height","img","toDataURL","pdf","pdfConverter","addImage","save","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.0330799a.chunk.js","sourcesContent":["import { Line, Chart } from \"react-chartjs-2\";\r\nimport zoomPlugin from \"chartjs-plugin-zoom\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\n\r\nChart.register(zoomPlugin);\r\nChart.register(ChartDataLabels);\r\n\r\nexport const Chart2 = ({ chartData, subtitle, displayValues }) => {\r\n  return (\r\n    // style={{ height: \"600px\", width: \"1900px\" }}\r\n    <div>\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          responsive: true,\r\n          interaction: {\r\n            mode: \"index\",\r\n            intersect: false\r\n          },\r\n          stacked: false,\r\n          plugins: {\r\n            title: {\r\n              display: true,\r\n              text: [\"\", \"\"]\r\n            },\r\n            legend: {\r\n              position: \"bottom\"\r\n            },\r\n            zoom: {\r\n              zoom: {\r\n                min: 1,\r\n                max: 1000,\r\n                wheel: {\r\n                  enabled: true // SET SCROOL ZOOM TO TRUE\r\n                },\r\n                drag: {\r\n                  enabled: false // SET SCROOL ZOOM TO TRUE\r\n                },\r\n                mode: \"x\",\r\n                speed: 100\r\n              },\r\n              pan: {\r\n                enabled: false,\r\n                mode: \"xy\",\r\n                speed: 100\r\n              }\r\n            },\r\n            datalabels: {\r\n              display: displayValues,\r\n              color: \"black\",\r\n              align: \"end\",\r\n              padding: {\r\n                right: 2\r\n              },\r\n              labels: {\r\n                padding: { top: 10 },\r\n                title: {\r\n                  font: {\r\n                    //weight: \"bold\"\r\n                  }\r\n                },\r\n                value: {\r\n                  color: \"green\"\r\n                }\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            y: {\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"left\",\r\n              ticks: {\r\n                callback: function (value, index, ticks) {\r\n                  return value + \" °C\";\r\n                }\r\n              }\r\n            },\r\n            y1: {\r\n              type: \"linear\",\r\n              display: true,\r\n              position: \"right\",\r\n              grid: {\r\n                drawOnChartArea: false\r\n              },\r\n              ticks: {\r\n                callback: function (value, index, ticks) {\r\n                  return value + \" CP\";\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export const ChartInfo = ({ subtitle }) => {\r\n  return (\r\n    <div className=\"ChartInfo\">\r\n      <div>\r\n        <b> Time-Temperature-Carbon Potential </b>\r\n      </div>\r\n      <br />\r\n      <div>{subtitle ? subtitle : \"\"}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport \"./styles.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction Form(props) {\r\n  const [inputField, setInputField] = useState({\r\n    fromTime: \"\",\r\n    toTime: \"\",\r\n    furnace: \"\",\r\n    furnaceLabel: \"\",\r\n    customer: \"\",\r\n    material: \"\",\r\n    partName: \"\",\r\n    partNumber: \"\",\r\n    process: \"\",\r\n    batchNo: \"\",\r\n    batchQty: \"\",\r\n    soakingStart: \"\",\r\n    soakingEnd: \"\",\r\n    totalSoakingTime: \"\",\r\n    subTitle: \"\",\r\n    interval: \"\"\r\n  });\r\n\r\n  const options = [\r\n    { value: \"\", label: \"Select Furnace\" },\r\n    { value: \"CH1,CH15,CH3,CH19,CH2,CH16\", label: \"SQF1\" },\r\n    { value: \"CH4,CH18,CH6,CH20,CH5,CH17\", label: \"SQF2\" },\r\n    { value: \"CH7,CH24\", label: \"TF1\" },\r\n    { value: \"CH8,CH25\", label: \"TF2\" },\r\n    { value: \"CH9,CH28\", label: \"TF3\" },\r\n    { value: \"CH10,CH22,CH12,CH21,CH11,CH23\", label: \"GCF\" },\r\n    { value: \"CH13,CH27\", label: \"THF1\" },\r\n    { value: \"CH14,CH26\", label: \"THF2\" }\r\n  ];\r\n\r\n  const setSubTitle = () => {\r\n    const fromTimeToDisplay = inputField.fromTime\r\n      ? moment(inputField.fromTime).format(\"DD/MM/YYYY\")\r\n      : \"\";\r\n    const toTimeToDisplay = inputField.toTime\r\n      ? moment(inputField.toTime).format(\"DD/MM/YYYY\")\r\n      : \"\";\r\n    const furnaceToDisplay = furnaceObjToDisplay\r\n      ? furnaceObjToDisplay.label\r\n      : \"\";\r\n    inputField.furnaceLabel = furnaceToDisplay;\r\n    return (\r\n      \"From: \" +\r\n      fromTimeToDisplay +\r\n      \" | To: \" +\r\n      toTimeToDisplay +\r\n      \" | Furnace: \" +\r\n      furnaceToDisplay +\r\n      \" | Customer: \" +\r\n      inputField.customer +\r\n      \" | Material: \" +\r\n      inputField.material +\r\n      \" | Part Name: \" +\r\n      inputField.partName +\r\n      \" | Part Number: \" +\r\n      inputField.partNumber +\r\n      \" | Process: \" +\r\n      inputField.process +\r\n      \" | Batch No: \" +\r\n      inputField.batchNo +\r\n      \" | Batch Qty: \" +\r\n      inputField.batchQty +\r\n      \" | Soaking Start: \" +\r\n      inputField.soakingStart +\r\n      \" | Soaking End: \" +\r\n      inputField.soakingEnd +\r\n      \" | Total Soaking Time: \" +\r\n      inputField.totalSoakingTime\r\n    );\r\n  };\r\n\r\n  const furnaceObjToDisplay = options.find((obj) => {\r\n    return obj.value === inputField.furnace;\r\n  });\r\n\r\n  const inputsHandler = (e) => {\r\n    setInputField({ ...inputField, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const submitButton = (e) => {\r\n    const subTitle = setSubTitle();\r\n    props.callbackSubmit(inputField, subTitle);\r\n  };\r\n\r\n  const exportButton = (e) => {\r\n    props.callbackExport(e);\r\n  };\r\n\r\n  const resetButton = (e) => {\r\n    setInputField({\r\n      fromTime: \"\",\r\n      toTime: \"\",\r\n      furnace: \"\",\r\n      furnaceLabel: \"\",\r\n      customer: \"\",\r\n      material: \"\",\r\n      partName: \"\",\r\n      partNumber: \"\",\r\n      process: \"\",\r\n      batchNo: \"\",\r\n      batchQty: \"\",\r\n      soakingStart: \"\",\r\n      soakingEnd: \"\",\r\n      totalSoakingTime: \"\",\r\n      subTitle: \"\",\r\n      interval: \"\"\r\n    });\r\n  };\r\n\r\n  const displayButton = (e) => {\r\n    props.callbackDisplayReadings((displayValues) => !displayValues);\r\n  };\r\n\r\n  const handleChangeFromTime = (data) => {\r\n    setInputField({ ...inputField, fromTime: data });\r\n  };\r\n  const handleChangeToTime = (data) => {\r\n    setInputField({ ...inputField, toTime: data });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"customer\">From: </label>\r\n      <DatePicker\r\n        name=\"fromTime\"\r\n        selected={inputField.fromTime}\r\n        onChange={handleChangeFromTime}\r\n        dateFormat=\"yyyy-MM-dd HH:mm:ss\"\r\n        timeInputLabel=\"Time:\"\r\n        timeFormat=\"HH:mm\"\r\n        startDate={inputField.fromTime}\r\n        endDate={inputField.toTime}\r\n        showTimeSelect\r\n      />\r\n      <br />\r\n      <label htmlFor=\"customer\">To: </label>\r\n      <DatePicker\r\n        name=\"toTime\"\r\n        selected={inputField.toTime}\r\n        onChange={handleChangeToTime}\r\n        dateFormat=\"yyyy-MM-dd HH:mm:ss\"\r\n        timeInputLabel=\"Time:\"\r\n        timeFormat=\"HH:mm:ss\"\r\n        startDate={inputField.fromTime}\r\n        endDate={inputField.toTime}\r\n        minDate={inputField.fromTime}\r\n        showTimeSelect\r\n      />\r\n      <br />\r\n      <label htmlFor=\"customer\">Furnace: </label>\r\n      <select\r\n        type=\"text\"\r\n        name=\"furnace\"\r\n        onChange={inputsHandler}\r\n        value={inputField.furnace}\r\n      >\r\n        {options.map((option) => (\r\n          <option\r\n            key={option.value}\r\n            value={option.value}\r\n            defaultValue={option[0]}\r\n          >\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <br />\r\n      <label htmlFor=\"customer\">Customer: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"customer\"\r\n        onChange={inputsHandler}\r\n        value={inputField.customer}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"material\">Material: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"material\"\r\n        onChange={inputsHandler}\r\n        value={inputField.material}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"partName\">Part Name: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"partName\"\r\n        onChange={inputsHandler}\r\n        value={inputField.partName}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"partNumber\">Part Number: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"partNumber\"\r\n        onChange={inputsHandler}\r\n        value={inputField.partNumber}\r\n      />\r\n      <br />\r\n      <label for=\"process\">Process: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"process\"\r\n        onChange={inputsHandler}\r\n        value={inputField.process}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"batchNo\">Batch No: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"batchNo\"\r\n        onChange={inputsHandler}\r\n        value={inputField.batchNo}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"batchQty\">Batch Qty: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"batchQty\"\r\n        onChange={inputsHandler}\r\n        value={inputField.batchQty}\r\n      />\r\n      <br />\r\n      <label for=\"soakingStart\">Soaking Start: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"soakingStart\"\r\n        onChange={inputsHandler}\r\n        value={inputField.soakingStart}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"soakingEnd\">Soaking End: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"soakingEnd\"\r\n        onChange={inputsHandler}\r\n        value={inputField.soakingEnd}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"totalSoakingTime\">Total Soaking Time: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"totalSoakingTime\"\r\n        onChange={inputsHandler}\r\n        value={inputField.totalSoakingTime}\r\n      />\r\n      <br />\r\n      <label htmlFor=\"interval\">Interval: </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"interval\"\r\n        onChange={inputsHandler}\r\n        value={inputField.interval}\r\n      />\r\n      <br />\r\n      <button onClick={submitButton}>Draw</button>\r\n      <button onClick={resetButton}>Reset</button>\r\n      <button onClick={exportButton}>Export</button>\r\n      <button onClick={displayButton}>Readings</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import { useState } from \"react\";\nimport { Chart2 } from \"./Chart\";\nimport \"./styles.css\";\nimport moment from \"moment\";\nimport html2canvas from \"html2canvas\";\nimport pdfConverter from \"jspdf\";\nimport { ChartInfo } from \"./ChartInfo\";\nimport Form from \"./Form\";\n\nexport default function App() {\n  const [chartData, setChartData] = useState({});\n  const [displayReadings, setDisplayReadings] = useState(false);\n\n  const [subTitle, setSubTitle] = useState(\"\");\n\n  const setChartFormData = (chartData, subTitle) => {\n    //setChartData(chartData);\n    setSubTitle(subTitle);\n    //https://mocki.io/v1/846e861f-8566-4006-bb21-59cac21a1fff\n    fetchPrices(\n      \"http://localhost:8082/data\",\n      chartData.fromTime,\n      chartData.toTime,\n      chartData.furnace,\n      chartData.furnaceLabel,\n      chartData.interval\n    );\n  };\n\n  const getTimePortion = (item) => {\n    let time = item.timestamp;\n    return time.substring(11, 16);\n  };\n\n  const setDisplayReadingsCallback = () => {\n    setDisplayReadings((displayReadings) => !displayReadings);\n  };\n\n  const exportChart = (e) => {\n    //const but = e.target;\n    //but.style.display = \"none\";\n    let input = window.document.getElementsByClassName(\"App ChartDiv\")[0];\n\n    html2canvas(input).then((canvas) => {\n      console.log(canvas.width + \"  \" + canvas.height);\n      const img = canvas.toDataURL(\"image/jpg\");\n      const pdf = new pdfConverter(\n        \"l\",\n        \"pt\",\n        [canvas.width, canvas.height],\n        true\n      );\n      pdf.addImage(img, \"JPEG\", 1, 1, canvas.width, canvas.height);\n      pdf.save(\"chart.pdf\");\n      //but.style.display = \"block\";\n    });\n  };\n\n  // const [chartData, setChartData] = useState(null);\n  const fetchPrices = async (\n    url,\n    fromTime,\n    toTime,\n    furnace,\n    furnaceLabel,\n    interval\n  ) => {\n    url =\n      url +\n      \"?fromTime=\" +\n      moment(fromTime).format(\"YYYY-MM-DD HH:mm:ss\") +\n      \"&toTime=\" +\n      moment(toTime).format(\"YYYY-MM-DD HH:mm:ss\") +\n      \"&furnace=\" +\n      furnace +\n      \"&interval=\" +\n      interval;\n    console.log(url);\n    const res = await fetch(url);\n    const data = await res.json();\n\n    let datasetfiltered = [];\n\n    if (\n      furnaceLabel === \"SQF1\" ||\n      furnaceLabel === \"SQF2\" ||\n      furnaceLabel === \"GCF\"\n    ) {\n      datasetfiltered = [\n        {\n          label: \"Actual Process Temp\",\n          data: data.data.map((item) => item.actualMv),\n          borderColor: \"#ff6384\",\n          backgroundColor: \"#ff6384\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Set Process Temp\",\n          data: data.data.map((item) => item.setMv),\n          borderColor: \"#ff6384\",\n          backgroundColor: \"#ff6384\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Actual Oil Temp\",\n          data: data.data.map((item) => item.actualOt),\n          borderColor: \"#36a2eb\",\n          backgroundColor: \"#36a2eb\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Set Oil Temp\",\n          data: data.data.map((item) => item.setOt),\n          borderColor: \"#36a2eb\",\n          backgroundColor: \"#36a2eb\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Actual % CP\",\n          data: data.data.map((item) => item.actualCp),\n          borderColor: \"#cc65fe\",\n          backgroundColor: \"#cc65fe\",\n          yAxisID: \"y1\"\n        },\n        {\n          label: \"Set % CP\",\n          data: data.data.map((item) => item.setCp),\n          borderColor: \"#cc65fe\",\n          backgroundColor: \"#cc65fe\",\n          yAxisID: \"y1\"\n        }\n      ];\n    } else {\n      datasetfiltered = [\n        {\n          label: \"Actual Process Temp\",\n          data: data.data.map((item) => item.actualMv),\n          borderColor: \"#ff6384\",\n          backgroundColor: \"#ff6384\",\n          yAxisID: \"y\"\n        },\n        {\n          label: \"Set Process Temp\",\n          data: data.data.map((item) => item.setMv),\n          borderColor: \"#ff6384\",\n          backgroundColor: \"#ff6384\",\n          yAxisID: \"y\"\n        }\n      ];\n    }\n\n    setChartData({\n      labels: data.data.map((item) => getTimePortion(item)),\n      datasets: datasetfiltered\n    });\n  };\n\n  const resetForm = (obj) => {\n    setInputField({});\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App FormDiv\">\n        <Form\n          callbackSubmit={setChartFormData}\n          callbackExport={exportChart}\n          callbackDisplayReadings={setDisplayReadingsCallback}\n        />\n      </div>\n\n      <div className=\"App ChartDiv\">\n        <ChartInfo subtitle={subTitle} />\n        <Chart2\n          chartData={chartData}\n          displayValues={displayReadings}\n          subtitle={subTitle ? subTitle : \"\"}\n        />\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}